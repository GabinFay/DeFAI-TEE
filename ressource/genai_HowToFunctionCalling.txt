Copyright 2024 Google LLC.

# @title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
     
Gemini API: Function calling with Python
Run in Google Colab
Function calling lets developers create a description of a function in their code, then pass that description to a language model in a request. The response from the model includes the name of a function that matches the description and the arguments to call it with. Function calling lets you use functions as tools in generative AI applications, and you can define more than one function within a single request.

This notebook provides code examples to help you get started. The documentation's quickstart is also a good place to start understanding function calling.

Setup
Install dependencies

%pip install -qU 'google-genai>1.0.0'
     

from google import genai
     
Set up your API key
To run the following cell, your API key must be stored it in a Colab Secret named GOOGLE_API_KEY. If you don't already have an API key, or you're not sure how to create a Colab Secret, see the Authentication quickstart for an example.


from google.colab import userdata

GOOGLE_API_KEY = userdata.get("GOOGLE_API_KEY")
client = genai.Client(api_key=GOOGLE_API_KEY)
     
Choose a model
Function calling should work with all the Gemini 2.0 models with the GenAI SDK. It also works with the 1.5 generation of models.


MODEL_ID = "gemini-2.0-flash" # @param ["gemini-1.5-flash-latest","gemini-2.0-flash-lite","gemini-2.0-flash","gemini-2.0-pro-exp-02-05"] {"allow-input":true, isTemplate: true}
     
Function calling basics
To use function calling, pass a list of functions to the tools parameter when creating a GenerativeModel. The model uses the function name, docstring, parameters, and parameter type annotations to decide if it needs the function to best answer a prompt.

Important: The SDK converts function parameter type annotations to a format the API understands (genai.types.FunctionDeclaration). The API only supports a limited selection of parameter types, and the Python SDK's automatic conversion only supports a subset of that: AllowedTypes = int | float | bool | str | list['AllowedTypes'] | dict


from google.genai import types
def add(a: float, b: float):
    """returns a + b."""
    return a + b


def subtract(a: float, b: float):
    """returns a - b."""
    return a - b


def multiply(a: float, b: float):
    """returns a * b."""
    return a * b


def divide(a: float, b: float):
    """returns a / b."""
    return a / b


operation_tools = [add, subtract, multiply, divide]
     
Automatic function calling
Function calls naturally fit in to multi-turn chats as they capture a back and forth interaction between the user and model. The Python SDK's Chat Session is a great interface for chats because handles the conversation history for you, and using the parameter automatic_function_calling (enabled by default) simplifies function calling even further:


chat = client.chats.create(
    model = MODEL_ID,
    config = {
        "tools": operation_tools,
        "automatic_function_calling": {"disable": False} # This line is not needed as automatic_function_calling is enabled by default
    }
)
     
With automatic function calling enabled, Chat.send_message automatically calls your function if the model asks it to.

In the following example, the result appears to simply be a text response containing the correct answer:


response = chat.send_message(
    "I have 57 cats, each owns 44 mittens, how many mittens is that in total?"
)
response.text
     
'That is 2508 mittens in total.'

57 * 44
     
2508
However, by examining the chat history, you can see the flow of the conversation and how function calls are integrated within it.

The Chat.history property stores a chronological record of the conversation between the user and the Gemini model. You can get the history using Chat.get_history(). Each turn in the conversation is represented by a genai.types.Content object, which contains the following information:

Role: Identifies whether the content originated from the "user" or the "model".
Parts: A list of genai.types.Part objects that represent individual components of the message. With a text-only model, these parts can be:
Text: Plain text messages.
Function Call (genai.types.FunctionCall): A request from the model to execute a specific function with provided arguments.
Function Response (genai.types.FunctionResponse): The result returned by the user after executing the requested function.
In the previous example with the mittens calculation, the history shows the following sequence:

User: Asks the question about the total number of mittens.
Model: Determines that the multiply function is helpful and sends a FunctionCall request to the user.
User: The Chat session automatically executes the function (due to _automatic_function_calling being set) and sends back a FunctionResponse with the calculated result.
Model: Uses the function's output to formulate the final answer and presents it as a text response.

from IPython.display import Markdown, display

for content in chat.get_history():
    display(Markdown("###" + content.role + ":"))
    for part in content.parts:
        if part.text:
            display(Markdown(part.text))
        if part.function_call:
            print("Function call: {", part.function_call, "}")
        if part.function_response:
            print("Function response: {", part.function_response, "}")
    print("-" * 80)

     
user:
I have 57 cats, each owns 44 mittens, how many mittens is that in total?

--------------------------------------------------------------------------------
model:
Function call: { id=None args={'a': 57, 'b': 44} name='multiply' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='multiply' response={'result': 2508} }
--------------------------------------------------------------------------------
model:
That is 2508 mittens in total.

--------------------------------------------------------------------------------
In general the state diagram is:

The model can always reply with text, or a FunctionCall. If the model sends a FunctionCall the user must reply with a FunctionResponse
The model can respond with multiple function calls before returning a text response, and function calls come before the text response.

Manual function calling
For more control, you can process genai.types.FunctionCall requests from the model yourself. This would be the case if:

You use a Chat with the default "automatic_function_calling": {"disable": False}.
You use Client.model.generate_content (and manage the chat history yourself).
The following example is a rough equivalent of the function calling single-turn curl sample in Python. It uses functions that return (mock) movie playtime information, possibly from a hypothetical API:


def find_movies(description: str, location: str):
    """find movie titles currently playing in theaters based on any description, genre, title words, etc.

    Args:
        description: Any kind of description including category or genre, title words, attributes, etc.
        location: The city and state, e.g. San Francisco, CA or a zip code e.g. 95616
    """
    return ["Barbie", "Oppenheimer"]


def find_theaters(location: str, movie: str):
    """Find theaters based on location and optionally movie title which are is currently playing in theaters.

    Args:
        location: The city and state, e.g. San Francisco, CA or a zip code e.g. 95616
        movie: Any movie title
    """
    return ["Googleplex 16", "Android Theatre"]


def get_showtimes(location: str, movie: str, theater: str, date: str):
    """
    Find the start times for movies playing in a specific theater.

    Args:
      location: The city and state, e.g. San Francisco, CA or a zip code e.g. 95616
      movie: Any movie title
      thearer: Name of the theater
      date: Date for requested showtime
    """
    return ["10:00", "11:00"]

theater_functions = [find_movies, find_theaters, get_showtimes]
     
After using generate_content() to ask a question, the model requests a function_call:


response = client.models.generate_content(
    model=MODEL_ID,
    contents="Which theaters in Mountain View show the Barbie movie?",
    config = {
        "tools": theater_functions,
        "automatic_function_calling": {"disable": True} # This line is not needed as automatic_function_calling is enabled by default
    }
)

response.candidates[0].content.parts
     
[Part(video_metadata=None, thought=None, code_execution_result=None, executable_code=None, file_data=None, function_call=FunctionCall(id=None, args={'movie': 'Barbie', 'location': 'Mountain View, CA'}, name='find_theaters'), function_response=None, inline_data=None, text=None)]
Since this is not using a ChatSession with automatic function calling, you have to call the function yourself.

A very simple way to do this would be with if statements:

if function_call.name == 'find_theaters':
  find_theaters(**function_call.args)
elif ...
However, since you already made the functions dictionary, this can be simplified to:


def call_function(function_call, functions):
    function_name = function_call.name
    function_args = function_call.args
    # Find the function object from the list based on the function name
    for func in functions:
        if func.__name__ == function_name:
            return func(**function_args)

part = response.candidates[0].content.parts[0]

# Check if it's a function call; in real use you'd need to also handle text
# responses as you won't know what the model will respond with.
if part.function_call:
    result = call_function(part.function_call, theater_functions)

print(result)
     
['Googleplex 16', 'Android Theatre']
Finally, pass the response plus the message history to the next generate_content() call to get a final text response from the model. The next code cell is showing on purpose different ways to write down Content so you can choose the one that you prefer.


# Build the message history
messages = [
    genai.types.Content(role="user", parts=[genai.types.Part(text="Which theaters in Mountain View show the Barbie movie?.")]),
    genai.types.Content(role="model", parts=[part]),
    {"role":"user", "parts":[{"function_response":{"response":{"output":result}, "name":part.function_call.name}}]},
]

# Generate the next response
response = client.models.generate_content(
    model=MODEL_ID,
    contents=messages,
    config = {
        "tools": theater_functions,
        "automatic_function_calling": {"disable": True}
    }
)
print(response.text)
     
Theaters in Mountain View that show the Barbie movie are Googleplex 16 and Android Theatre.
Function calling chain
The model is not limited to one function call, it can chain them until it finds the right answer.


chat = client.chats.create(
    model = MODEL_ID,
    config = {
        "tools": theater_functions,
    }
)

response = chat.send_message(
    "Which comedy movies are shown tonight (01/01/2025) in Mountain view, in which cinema and at what time?"
)

for content in chat.get_history():
    display(Markdown("###" + content.role + ":"))
    for part in content.parts:
        if part.text:
            display(Markdown(part.text))
        if part.function_call:
            print("Function call: {", part.function_call, "}")
        if part.function_response:
            print("Function response: {", part.function_response, "}")
    print("-" * 80)
     
user:
Which comedy movies are shown tonight (01/01/2025) in Mountain view, in which cinema and at what time?

--------------------------------------------------------------------------------
model:
Function call: { id=None args={'location': 'Mountain View, CA', 'description': 'comedy'} name='find_movies' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='find_movies' response={'result': ['Barbie', 'Oppenheimer']} }
--------------------------------------------------------------------------------
model:
I found the following comedy movies: Barbie, Oppenheimer.

Function call: { id=None args={'location': 'Mountain View, CA', 'movie': 'Barbie'} name='find_theaters' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='find_theaters' response={'result': ['Googleplex 16', 'Android Theatre']} }
--------------------------------------------------------------------------------
model:
Function call: { id=None args={'date': '01/01/2025', 'theater': 'Googleplex 16', 'movie': 'Barbie', 'location': 'Mountain View, CA'} name='get_showtimes' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='get_showtimes' response={'result': ['10:00', '11:00']} }
--------------------------------------------------------------------------------
model:
Function call: { id=None args={'movie': 'Barbie', 'date': '01/01/2025', 'location': 'Mountain View, CA', 'theater': 'Android Theatre'} name='get_showtimes' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='get_showtimes' response={'result': ['10:00', '11:00']} }
--------------------------------------------------------------------------------
model:
Barbie is playing at Googleplex 16 and Android Theatre at 10:00 and 11:00.

Function call: { id=None args={'movie': 'Oppenheimer', 'location': 'Mountain View, CA'} name='find_theaters' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='find_theaters' response={'result': ['Googleplex 16', 'Android Theatre']} }
--------------------------------------------------------------------------------
model:
Function call: { id=None args={'location': 'Mountain View, CA', 'movie': 'Oppenheimer', 'date': '01/01/2025', 'theater': 'Googleplex 16'} name='get_showtimes' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='get_showtimes' response={'result': ['10:00', '11:00']} }
--------------------------------------------------------------------------------
model:
Function call: { id=None args={'theater': 'Android Theatre', 'movie': 'Oppenheimer', 'location': 'Mountain View, CA', 'date': '01/01/2025'} name='get_showtimes' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='get_showtimes' response={'result': ['10:00', '11:00']} }
--------------------------------------------------------------------------------
model:
Oppenheimer is playing at Googleplex 16 and Android Theatre at 10:00 and 11:00.

--------------------------------------------------------------------------------
Here you can see that the model made seven calls to answer your question and used the outputs of them in the subsequent calls and in the final answer.

Parallel function calls
The Gemini API can call multiple functions in a single turn. This caters for scenarios where there are multiple function calls that can take place independently to complete a task.

First set the tools up. Unlike the movie example above, these functions do not require input from each other to be called so they should be good candidates for parallel calling.


def power_disco_ball(power: bool) -> bool:
    """Powers the spinning disco ball."""
    print(f"Disco ball is {'spinning!' if power else 'stopped.'}")
    return True


def start_music(energetic: bool, loud: bool, bpm: int) -> str:
    """Play some music matching the specified parameters.

    Args:
      energetic: Whether the music is energetic or not.
      loud: Whether the music is loud or not.
      bpm: The beats per minute of the music.

    Returns: The name of the song being played.
    """
    print(f"Starting music! {energetic=} {loud=}, {bpm=}")
    return "Never gonna give you up."


def dim_lights(brightness: float) -> bool:
    """Dim the lights.

    Args:
      brightness: The brightness of the lights, 0.0 is off, 1.0 is full.
    """
    print(f"Lights are now set to {brightness:.0%}")
    return True
     
Now call the model with an instruction that could use all of the specified tools.


# Set the chat up with tools.
chat = client.chats.create(
    model = MODEL_ID,
    config = {
        "tools": house_fns,
    }
)

# Call the API
response = chat.send_message(
    "Turn this place into a party!"
)

# Print out each of the function calls requested from this single call.
for content in chat.get_history():
    display(Markdown("###" + content.role + ":"))
    for part in content.parts:
        if part.text:
            display(Markdown(part.text))
        if part.function_call:
            print("Function call: {", part.function_call, "}")
        if part.function_response:
            print("Function response: {", part.function_response, "}")
    print("-" * 80)
     
Disco ball is spinning!
Lights are now set to 50%
user:
Turn this place into a party!

--------------------------------------------------------------------------------
model:
Function call: { id=None args={'power': True} name='power_disco_ball' }
Function call: { id=None args={'energetic': True, 'loud': True} name='start_music' }
Function call: { id=None args={'brightness': 0.5} name='dim_lights' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='power_disco_ball' response={'result': True} }
Function response: { id=None name='start_music' response={'error': "Failed to invoke function start_music with converted arguments {'energetic': True, 'loud': True} from model returned function call argument {'energetic': True, 'loud': True} because of error start_music() missing 1 required positional argument: 'bpm'"} }
Function response: { id=None name='dim_lights' response={'result': True} }
--------------------------------------------------------------------------------
model:
I can turn on the disco ball and dim the lights, but I need a bpm for the music. What bpm would you like?

--------------------------------------------------------------------------------
As you can see, the model didn't wait for the different function calls and instead called multiple ones in parallel.

Next Steps
Useful API references:
The genai.Client class
Its Client.models.generate_content method has a genai.types.GenerateContentConfig field that is in particular used to set the tools and function calls.
The config's tools attribute contains a list of genai.types.Tools objects.
The function_declarations attribute contains a list of genai.types.FunctionDeclarations objects.
The response's candidate's content's parts may contain a genai.types.FunctionCall, in response.candidates[0].contents.parts[0].
if automatic_function_calling is not disabled, the genai.Chats session executes the call, and sends back the [genai.types.FunctionResponse]https://googleapis.github.io/python-genai/genai.html#genai.types.FunctionResponse).
In response to a FunctionCall the model always expects a FunctionResponse.
If you reply manually using Chats.send_message or models.generate_content remember thart the API is stateless you have to send the whole conversation history (a list of Content objects), not just the last one containing the FunctionResponse.
Related examples
Check those examples using function calling to give you more ideas on how to use that very useful feature:

Barista Bot, an agent to order coffee
Browser-as-a-tool, using function calling to call a web-browser.
Using function calling to re-rank seach results.
Using tools with the Live API, using function calling and other tools with the Live APIs.
Continue your discovery of the Gemini API
Learn how to control how the Gemini API interact with your functions in the function calling config quickstart, discover how to control the model output in JSON or using an Enum or learn how the Gemini API can generate and run code by itself using Code execution